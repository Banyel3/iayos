{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/code/iayos/apps/frontend_web/app/dashboard/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useAuth } from \"@/context/AuthContext\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst TempDashboard = () => {\r\n  const { user, isAuthenticated, isLoading, logout } = useAuth();\r\n  const router = useRouter();\r\n  const [selectedType, setSelectedType] = useState<\"WORKER\" | \"CLIENT\" | null>(\r\n    null\r\n  );\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [redirectCountdown, setRedirectCountdown] = useState(3);\r\n\r\n  // Redirect logic for existing profileType\r\n  useEffect(() => {\r\n    if (\r\n      user?.profileType === \"WORKER\" ||\r\n      user?.profileType === \"CLIENT\"\r\n    ) {\r\n      router.replace(\"/dashboard/profile\");\r\n    }\r\n  }, [user?.profileType, router]);\r\n\r\n  // Auto-redirect countdown for unauthorized users\r\n  useEffect(() => {\r\n    if (!isLoading && !isAuthenticated) {\r\n      let countdown = 3; // change this number for seconds\r\n      setRedirectCountdown(countdown);\r\n\r\n      const interval = setInterval(() => {\r\n        countdown -= 1;\r\n        setRedirectCountdown(countdown);\r\n\r\n        if (countdown <= 0) {\r\n          clearInterval(interval);\r\n          router.push(\"/auth/login\");\r\n        }\r\n      }, 1000);\r\n\r\n      return () => clearInterval(interval);\r\n    }\r\n  }, [user, isAuthenticated, isLoading, router]);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"flex justify-center items-center min-h-screen bg-gray-50\">\r\n        <div className=\"flex flex-col items-center space-y-4\">\r\n          <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin\"></div>\r\n          <p className=\"text-gray-600\">Loading session...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <>\r\n        {/* Modal Overlay */}\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\r\n          <div className=\"bg-white rounded-2xl shadow-xl max-w-sm w-full mx-4 relative\">\r\n            {/* Content */}\r\n            <div className=\"p-6 text-center\">\r\n              {/* Icon */}\r\n              <div className=\"mx-auto flex items-center justify-center w-16 h-16 bg-red-100 rounded-full mb-4\">\r\n                <svg\r\n                  className=\"w-8 h-8 text-red-600\"\r\n                  fill=\"none\"\r\n                  viewBox=\"0 0 24 24\"\r\n                  stroke=\"currentColor\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={2}\r\n                    d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 6.5c-.77.833-.192 2.5 1.732 2.5z\"\r\n                  />\r\n                </svg>\r\n              </div>\r\n\r\n              {/* Title */}\r\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2 font-inter\">\r\n                Access Denied\r\n              </h3>\r\n\r\n              {/* Message */}\r\n              <p className=\"text-gray-600 mb-4 font-inter\">\r\n                You are not logged in. Redirecting to login page...\r\n              </p>\r\n\r\n              {/* Countdown */}\r\n              <div className=\"bg-blue-50 rounded-lg p-3 mb-4\">\r\n                <p className=\"text-sm text-blue-800 font-inter\">\r\n                  Redirecting in{\" \"}\r\n                  <span className=\"font-bold text-blue-900\">\r\n                    {redirectCountdown}\r\n                  </span>{\" \"}\r\n                  second{redirectCountdown !== 1 ? \"s\" : \"\"}\r\n                </p>\r\n              </div>\r\n\r\n              {/* Manual redirect button */}\r\n              <button\r\n                onClick={() => router.push(\"/auth/login\")}\r\n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2.5 px-4 rounded-lg transition-colors duration-200 font-inter\"\r\n              >\r\n                Go to Login Now\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Background content (blurred) */}\r\n        <div className=\"flex justify-center items-center min-h-screen bg-gray-50 blur-sm\">\r\n          <div className=\"text-center\">\r\n            <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">Dashboard</h1>\r\n            <p className=\"text-gray-600\">Loading...</p>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  // Handle form submission\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!selectedType) return;\r\n\r\n    // Check if user email exists\r\n    if (!user?.email) {\r\n      console.error(\"No email found in user:\", user);\r\n      setIsSubmitting(false);\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      const values = {\r\n        selectedType,\r\n        email: user.email,\r\n      };\r\n\r\n      console.log(\"Sending request:\", values);\r\n\r\n      const res = await fetch(\"/api/auth/assign-role\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(values),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const errorData = await res.json();\r\n        console.error(\"API Response Error:\", errorData);\r\n        throw new Error(errorData.error || \"An Error Occurred\");\r\n      } else {\r\n        console.log(\"Profile type assigned successfully\");\r\n\r\n        // Note: You'll need to implement a way to refresh user data\r\n        // For now, we'll redirect to profile page\r\n        router.push(\"/dashboard/profile\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating profile type:\", error);\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center min-h-screen bg-gray-50\">\r\n      <div className=\"mx-auto max-w-[390px] min-h-screen flex flex-col justify-between\">\r\n        {/* Header Section */}\r\n        <div className=\"flex flex-col justify-center flex-1 px-6\">\r\n          {/* Welcome Message */}\r\n          <div className=\"text-center mb-8\">\r\n            <div className=\"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-6\">\r\n              {user?.image ? (\r\n                <img\r\n                  src={user.image}\r\n                  alt=\"Profile\"\r\n                  className=\"w-16 h-16 rounded-full object-cover\"\r\n                />\r\n              ) : (\r\n                <svg\r\n                  className=\"w-10 h-10 text-blue-600\"\r\n                  fill=\"none\"\r\n                  stroke=\"currentColor\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={2}\r\n                    d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\r\n                  />\r\n                </svg>\r\n              )}\r\n            </div>\r\n\r\n            <h1 className=\"text-[28px] leading-[120%] font-[700] font-[Inter] text-black mb-2\">\r\n              Welcome, {user?.name?.split(\" \")[0] || \"User\"}!\r\n            </h1>\r\n            <p className=\"text-gray-600 text-base leading-[150%]\">\r\n              To get started, please choose how you&apos;ll be using iAyos\r\n            </p>\r\n          </div>\r\n\r\n          {/* User Type Selection Form */}\r\n          <form onSubmit={handleSubmit} className=\"space-y-6 mb-8\">\r\n            {/* Client Option */}\r\n            <div\r\n              className={`bg-white rounded-2xl p-6 border-2 cursor-pointer transition-all duration-200 ${\r\n                selectedType === \"CLIENT\"\r\n                  ? \"border-blue-500 bg-blue-50 shadow-md\"\r\n                  : \"border-gray-200 hover:border-gray-300 shadow-sm\"\r\n              }`}\r\n              onClick={() => setSelectedType(\"CLIENT\")}\r\n            >\r\n              <div className=\"flex items-center\">\r\n                <div className=\"flex-shrink-0 mr-4\">\r\n                  <div\r\n                    className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${\r\n                      selectedType === \"CLIENT\"\r\n                        ? \"border-blue-500 bg-blue-500\"\r\n                        : \"border-gray-300\"\r\n                    }`}\r\n                  >\r\n                    {selectedType === \"CLIENT\" && (\r\n                      <div className=\"w-3 h-3 rounded-full bg-white\"></div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center mb-2\">\r\n                    <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mr-3\">\r\n                      <svg\r\n                        className=\"w-6 h-6 text-blue-600\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth={2}\r\n                          d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"\r\n                        />\r\n                      </svg>\r\n                    </div>\r\n                    <h3 className=\"text-lg font-[600] font-[Inter] text-black\">\r\n                      I need services\r\n                    </h3>\r\n                  </div>\r\n                  <p className=\"text-gray-600 text-sm leading-[140%] ml-15\">\r\n                    Find skilled workers for your projects. Post jobs and hire\r\n                    freelancers.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Worker Option */}\r\n            <div\r\n              className={`bg-white rounded-2xl p-6 border-2 cursor-pointer transition-all duration-200 ${\r\n                selectedType === \"WORKER\"\r\n                  ? \"border-green-500 bg-green-50 shadow-md\"\r\n                  : \"border-gray-200 hover:border-gray-300 shadow-sm\"\r\n              }`}\r\n              onClick={() => setSelectedType(\"WORKER\")}\r\n            >\r\n              <div className=\"flex items-center\">\r\n                <div className=\"flex-shrink-0 mr-4\">\r\n                  <div\r\n                    className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${\r\n                      selectedType === \"WORKER\"\r\n                        ? \"border-green-500 bg-green-500\"\r\n                        : \"border-gray-300\"\r\n                    }`}\r\n                  >\r\n                    {selectedType === \"WORKER\" && (\r\n                      <div className=\"w-3 h-3 rounded-full bg-white\"></div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center mb-2\">\r\n                    <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mr-3\">\r\n                      <svg\r\n                        className=\"w-6 h-6 text-green-600\"\r\n                        fill=\"none\"\r\n                        stroke=\"currentColor\"\r\n                        viewBox=\"0 0 24 24\"\r\n                      >\r\n                        <path\r\n                          strokeLinecap=\"round\"\r\n                          strokeLinejoin=\"round\"\r\n                          strokeWidth={2}\r\n                          d=\"M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V4a2 2 0 00-2-2H6a2 2 0 00-2 2v2m8 0v2a2 2 0 01-2 2H8a2 2 0 01-2-2V6\"\r\n                        />\r\n                      </svg>\r\n                    </div>\r\n                    <h3 className=\"text-lg font-[600] font-[Inter] text-black\">\r\n                      I provide services\r\n                    </h3>\r\n                  </div>\r\n                  <p className=\"text-gray-600 text-sm leading-[140%] ml-15\">\r\n                    Showcase your skills and find clients. Build your freelance\r\n                    career.\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Submit Button */}\r\n            <button\r\n              type=\"submit\"\r\n              disabled={!selectedType || isSubmitting}\r\n              className={`w-full py-4 rounded-xl font-[600] font-[Inter] text-white transition-all duration-200 ${\r\n                selectedType && !isSubmitting\r\n                  ? \"bg-black hover:bg-gray-800 cursor-pointer\"\r\n                  : \"bg-gray-400 cursor-not-allowed\"\r\n              }`}\r\n            >\r\n              {isSubmitting ? (\r\n                <div className=\"flex items-center justify-center space-x-2\">\r\n                  <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\r\n                  <span>Setting up your account...</span>\r\n                </div>\r\n              ) : (\r\n                \"Continue\"\r\n              )}\r\n            </button>\r\n          </form>\r\n\r\n          {/* User Info */}\r\n          <div className=\"text-center text-sm text-gray-500 mb-4\">\r\n            Signed in as: {user?.email}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"p-6 text-center\">\r\n          <button\r\n            onClick={() => logout()}\r\n            className=\"text-gray-400 text-sm underline hover:text-gray-600 transition-colors\"\r\n          >\r\n            Sign Out\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TempDashboard;\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 651, "column": 0}, "map": {"version":3,"sources":["file:///C:/code/iayos/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}