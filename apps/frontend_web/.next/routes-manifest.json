{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/api/auth/[...nextauth]",
      "regex": "^/api/auth/(.+?)(?:/)?$",
      "routeKeys": {
        "nxtPnextauth": "nxtPnextauth"
      },
      "namedRegex": "^/api/auth/(?<nxtPnextauth>.+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/auth",
      "regex": "^/auth(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth(?:/)?$"
    },
    {
      "page": "/auth/error",
      "regex": "^/auth/error(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/error(?:/)?$"
    },
    {
      "page": "/auth/forgot-password",
      "regex": "^/auth/forgot\\-password(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/forgot\\-password(?:/)?$"
    },
    {
      "page": "/auth/forgot-password/verified",
      "regex": "^/auth/forgot\\-password/verified(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/forgot\\-password/verified(?:/)?$"
    },
    {
      "page": "/auth/login",
      "regex": "^/auth/login(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/login(?:/)?$"
    },
    {
      "page": "/auth/register",
      "regex": "^/auth/register(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/register(?:/)?$"
    },
    {
      "page": "/auth/register/agency",
      "regex": "^/auth/register/agency(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/register/agency(?:/)?$"
    },
    {
      "page": "/auth/select-type",
      "regex": "^/auth/select\\-type(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/select\\-type(?:/)?$"
    },
    {
      "page": "/auth/verify-email",
      "regex": "^/auth/verify\\-email(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/verify\\-email(?:/)?$"
    },
    {
      "page": "/auth/verify-email/agency",
      "regex": "^/auth/verify\\-email/agency(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/auth/verify\\-email/agency(?:/)?$"
    },
    {
      "page": "/dashboard",
      "regex": "^/dashboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard(?:/)?$"
    },
    {
      "page": "/dashboard/agency",
      "regex": "^/dashboard/agency(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard/agency(?:/)?$"
    },
    {
      "page": "/dashboard/inbox",
      "regex": "^/dashboard/inbox(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard/inbox(?:/)?$"
    },
    {
      "page": "/dashboard/profile",
      "regex": "^/dashboard/profile(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/dashboard/profile(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/onboard",
      "regex": "^/onboard(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/onboard(?:/)?$"
    },
    {
      "page": "/onboard/clients-view",
      "regex": "^/onboard/clients\\-view(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/onboard/clients\\-view(?:/)?$"
    },
    {
      "page": "/onboard/page",
      "regex": "^/onboard/page(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/onboard/page(?:/)?$"
    },
    {
      "page": "/onboard/workers-view",
      "regex": "^/onboard/workers\\-view(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/onboard/workers\\-view(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}