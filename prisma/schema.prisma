// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Accounts {
  accountID  Int       @id @default(autoincrement())
  email      String    @unique
  password   String? //hashed
  isVerified Boolean @default(false)
  verifyToken String? @default("")
  verifyTokenExpire DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  status     String
  profile    Profile[]
  agency     Agency[]

  defaultProfileId Int?
  defaultProfile Profile? @relation("defaultProfile",fields: [defaultProfileId], references: [profileID])


}


model Profile {
  profileID   Int          @id @default(autoincrement())
  accountID   Int         
  profileImg  String?
  firstName   String
  lastName    String?
  contactNum  String @unique
  birthDate DateTime
  profileType String?

  worker   Worker_Profile?
  accounts Accounts        @relation(fields: [accountID], references: [accountID])
  defaultProfile Accounts[] @relation("defaultProfile")

  @@unique([accountID, profileType])
}

enum availabilityStatus {
  AVAILABLE
  BUSY
  OFFLINE
}

model Worker_Profile {
  profileID          Int                @id
  hourlyRate         Decimal            @db.Decimal(10, 2)
  verifiedSkills     Json
  bio                String
  totalEarningGross  Decimal            @db.Decimal(10, 2)
  description        String
  availabilityStatus availabilityStatus @default(OFFLINE)

  profile                   Profile?                    @relation(fields: [profileID], references: [profileID])
  freelancer_specialization Freelancer_Specialization[]
}

model Freelancer_Specialization {
  workerID         Int
  specializationID Int
  experienceYears  Int
  certification    String

  worker_profile Worker_Profile @relation(fields: [workerID], references: [profileID])
  specialization Specialization @relation(fields: [specializationID], references: [specializationID])

  @@id([workerID, specializationID])
}

model Specialization {
  specializationID   Int    @id @unique @default(autoincrement())
  specializationName String

  freelancer_specialization Freelancer_Specialization[]
}

model Agency{
  agencyID Int @id @unique @default(autoincrement())
  accountID Int
  businessName String
  businessDesc String
  createdAt DateTime @default(now())

   agency_accounts Accounts @relation(fields: [accountID], references: [accountID])


}